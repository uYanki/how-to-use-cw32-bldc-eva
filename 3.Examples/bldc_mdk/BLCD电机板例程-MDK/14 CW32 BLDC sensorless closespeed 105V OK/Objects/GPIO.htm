<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GPIO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GPIO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Jul 16 04:43:40 2023
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BTIM1_IRQHandler &rArr; PIDcompute &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">BTIM2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">BTIM2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC_IRQHandler</a> from interrupts_cw32f030.o(i.ADC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[13]">ATIM_IRQHandler</a> from main.o(i.ATIM_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[24]">AWT_IRQHandler</a> from interrupts_cw32f030.o(i.AWT_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1a]">BTIM1_IRQHandler</a> from main.o(i.BTIM1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1b]">BTIM2_IRQHandler</a> from startup_cw32f030.o(.text) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1c]">BTIM3_IRQHandler</a> from motorcontrol.o(i.BTIM3_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[f]">DMACH1_IRQHandler</a> from motorcontrol.o(i.DMACH1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[10]">DMACH23_IRQHandler</a> from interrupts_cw32f030.o(i.DMACH23_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[11]">DMACH45_IRQHandler</a> from interrupts_cw32f030.o(i.DMACH45_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[25]">FAULT_IRQHandler</a> from interrupts_cw32f030.o(i.FAULT_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[9]">FLASHRAM_IRQHandler</a> from interrupts_cw32f030.o(i.FLASHRAM_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[b]">GPIOA_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOA_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[c]">GPIOB_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOB_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[d]">GPIOC_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[e]">GPIOF_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOF_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[16]">GTIM1_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[17]">GTIM2_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[18]">GTIM3_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM3_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[19]">GTIM4_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM4_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_cw32f030.o(i.HardFault_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from interrupts_cw32f030.o(i.I2C1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from interrupts_cw32f030.o(i.I2C2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from interrupts_cw32f030.o(i.LVD_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from interrupts_cw32f030.o(i.NMI_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from interrupts_cw32f030.o(i.PendSV_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from interrupts_cw32f030.o(i.RCC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from interrupts_cw32f030.o(i.RTC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cw32f030.o(.text) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from interrupts_cw32f030.o(i.SPI1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from interrupts_cw32f030.o(i.SPI2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from interrupts_cw32f030.o(i.SVC_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cw32f030_systick.o(i.SysTick_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_cw32f030.o(i.SystemInit) referenced from startup_cw32f030.o(.text)
 <LI><a href="#[21]">UART1_IRQHandler</a> from interrupts_cw32f030.o(i.UART1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[22]">UART2_IRQHandler</a> from interrupts_cw32f030.o(i.UART2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[23]">UART3_IRQHandler</a> from interrupts_cw32f030.o(i.UART3_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[14]">VC1_IRQHandler</a> from interrupts_cw32f030.o(i.VC1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[15]">VC2_IRQHandler</a> from interrupts_cw32f030.o(i.VC2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from interrupts_cw32f030.o(i.WDT_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cw32f030.o(.text)
 <LI><a href="#[2a]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[29]">fputc</a> from fputc.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2d]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[b2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_cw32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cw32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCS_chuli
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_StrEscCharacter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_START
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_init
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_init
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_init
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_init
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_init
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bd]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[35]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3e]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3d]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>ADCS_chuli</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, motorcontrol.o(i.ADCS_chuli))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADCS_chuli &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_SetCounter
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_SetAutoreload
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>ADC_Configuration</STRONG> (Thumb, 466 bytes, Stack size 80 bytes, main.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ADC_Configuration &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>ADC_Enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, cw32f030_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[58]"></a>ADC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[12]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC_Init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[59]"></a>ATIIM_init</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, main.o(i.ATIIM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ATIIM_init &rArr; ATIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_SetCompare4
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_SetCompare3A
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_SetCompare2A
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_SetCompare1A
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_PWMOutputConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_OC4Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_OC3AInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_OC2AInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_OC1AInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_CtrlPWMOutputs
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>ATIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>ATIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[64]"></a>ATIM_CtrlPWMOutputs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[68]"></a>ATIM_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_IRQHandler
</UL>

<P><STRONG><a name="[13]"></a>ATIM_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.ATIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_GetITStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ATIM_Init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[5d]"></a>ATIM_OC1AInit</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_OC1AInit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[5e]"></a>ATIM_OC2AInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_OC2AInit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[5f]"></a>ATIM_OC3AInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_OC3AInit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[66]"></a>ATIM_OC4Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cw32f030_atim.o(i.ATIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[63]"></a>ATIM_PWMOutputConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cw32f030_atim.o(i.ATIM_PWMOutputConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATIM_PWMOutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[60]"></a>ATIM_SetCompare1A</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_SetCompare1A))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[61]"></a>ATIM_SetCompare2A</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_SetCompare2A))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[62]"></a>ATIM_SetCompare3A</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_SetCompare3A))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[67]"></a>ATIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f030_atim.o(i.ATIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[24]"></a>AWT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.AWT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(i.BTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BTIM1_IRQHandler &rArr; PIDcompute &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BTIM3_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, motorcontrol.o(i.BTIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTIM3_IRQHandler &rArr; Commutation &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>BTIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>BTIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCS_chuli
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSORLESS_TIM_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
</UL>

<P><STRONG><a name="[71]"></a>BTIM_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
</UL>

<P><STRONG><a name="[6a]"></a>BTIM_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>BTIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSORLESS_TIM_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
</UL>

<P><STRONG><a name="[4d]"></a>BTIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCS_chuli
</UL>

<P><STRONG><a name="[4e]"></a>BTIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_START
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCS_chuli
</UL>

<P><STRONG><a name="[6f]"></a>BTIM_TimeBaseInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cw32f030_btim.o(i.BTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSORLESS_TIM_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
</UL>

<P><STRONG><a name="[6e]"></a>BTIM_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.BTIM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTIM_init &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Commutation</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, motorcontrol.o(i.Commutation))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Commutation &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_SetCounter
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_SetAutoreload
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetCounter
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_START
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM3_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_STOP
</UL>

<P><STRONG><a name="[f]"></a>DMACH1_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, motorcontrol.o(i.DMACH1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMACH1_IRQHandler &rArr; ADCS_chuli &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCS_chuli
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMACH23_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.DMACH23_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMACH45_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.DMACH45_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f030_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[72]"></a>DMA_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f030_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>DMA_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f030_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[54]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cw32f030_dma.o(i.DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[25]"></a>FAULT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.FAULT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASHRAM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.FLASHRAM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>FLASH_SetLatency</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cw32f030_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOF_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIO_Configuration</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>GPIO_Init</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, cw32f030_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[5b]"></a>GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_gpio.o(i.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
</UL>

<P><STRONG><a name="[16]"></a>GTIM1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, interrupts_cw32f030.o(i.GTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GTIM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_GetITStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GTIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GTIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GTIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GTIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GTIM_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_gtim.o(i.GTIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM1_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>GTIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f030_gtim.o(i.GTIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>GetConslonsCode_from_EXFlash</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, font.o(i.GetConslonsCode_from_EXFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetConslonsCode_from_EXFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar
</UL>

<P><STRONG><a name="[77]"></a>GetGBKCode_from_EXFlash</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, font.o(i.GetGBKCode_from_EXFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetGBKCode_from_EXFlash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar_CH
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>I2C1_DeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C1_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.I2C2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
</UL>

<P><STRONG><a name="[83]"></a>I2C_BaudGeneratorEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_BaudGeneratorEnable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
</UL>

<P><STRONG><a name="[80]"></a>I2C_ClearIrq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_ClearIrq))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>

<P><STRONG><a name="[97]"></a>I2C_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[84]"></a>I2C_FilterConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_FilterConfig))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
</UL>

<P><STRONG><a name="[7a]"></a>I2C_GenerateSTART</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>

<P><STRONG><a name="[7f]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>

<P><STRONG><a name="[7b]"></a>I2C_GetIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_GetIrq))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>

<P><STRONG><a name="[7c]"></a>I2C_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>

<P><STRONG><a name="[79]"></a>I2C_MasterWriteEepromData1</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, oled_i2c.o(i.I2C_MasterWriteEepromData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetIrq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[81]"></a>I2C_Master_Init</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, cw32f030_i2c.o(i.I2C_Master_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Master_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBaud
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FilterConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudGeneratorEnable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[86]"></a>I2C_OLED_Clear</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oled_i2c.o(i.I2C_OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_OLED_Clear &rArr; I2C_OLED_UPdata &rArr; WriteDat &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_UPdata
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>I2C_OLED_ClearPoint</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, oled_i2c.o(i.I2C_OLED_ClearPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_OLED_ClearPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar_CH
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar
</UL>

<P><STRONG><a name="[99]"></a>I2C_OLED_Clear_Line</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, oled_i2c.o(i.I2C_OLED_Clear_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_OLED_Clear_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_StrEscCharacter
</UL>

<P><STRONG><a name="[8e]"></a>I2C_OLED_DrawPoint</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, oled_i2c.o(i.I2C_OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar_CH
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar
</UL>

<P><STRONG><a name="[88]"></a>I2C_OLED_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, oled_i2c.o(i.I2C_OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_OLED_Init &rArr; WriteCmd &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>I2C_OLED_Move</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, oled_i2c.o(i.I2C_OLED_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_OLED_Move &rArr; I2C_OLED_UPdata &rArr; WriteDat &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_UPdata
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_StrEscCharacter
</UL>

<P><STRONG><a name="[8b]"></a>I2C_OLED_ShowChar</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, oled_i2c.o(i.I2C_OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_OLED_ShowChar &rArr; GetConslonsCode_from_EXFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConslonsCode_from_EXFlash
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_DrawPoint
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ClearPoint
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowString
</UL>

<P><STRONG><a name="[91]"></a>I2C_OLED_ShowChar_CH</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, oled_i2c.o(i.I2C_OLED_ShowChar_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C_OLED_ShowChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_DrawPoint
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ClearPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowString
</UL>

<P><STRONG><a name="[92]"></a>I2C_OLED_ShowString</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, oled_i2c.o(i.I2C_OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C_OLED_ShowString &rArr; OLED_StrEscCharacter &rArr; I2C_OLED_Move &rArr; I2C_OLED_UPdata &rArr; WriteDat &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_StrEscCharacter
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar_CH
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>I2C_OLED_UPdata</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, oled_i2c.o(i.I2C_OLED_UPdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_OLED_UPdata &rArr; WriteDat &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_Move
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_Clear
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>

<P><STRONG><a name="[7e]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>

<P><STRONG><a name="[82]"></a>I2C_SetBaud</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cw32f030_i2c.o(i.I2C_SetBaud))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
</UL>

<P><STRONG><a name="[95]"></a>I2C_init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, oled_i2c.o(i.I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_init &rArr; I2C_Master_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_DeInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>MOTOR_STOP</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, motorcontrol.o(i.MOTOR_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MOTOR_STOP &rArr; Commutation &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>OLED_StrEscCharacter</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, oled_i2c.o(i.OLED_StrEscCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_StrEscCharacter &rArr; I2C_OLED_Move &rArr; I2C_OLED_UPdata &rArr; WriteDat &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_Move
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_Clear_Line
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowString
</UL>

<P><STRONG><a name="[9a]"></a>PID_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pid.o(i.PID_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PID_init &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>PIDcompute</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, pid.o(i.PIDcompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PIDcompute &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>RCC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI_Enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>RCC_HSI_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cw32f030_rcc.o(i.RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>SENSORLESS_TIM_Config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, motorcontrol.o(i.SENSORLESS_TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SENSORLESS_TIM_Config &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>Sensorless_MOTOR_START</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, motorcontrol.o(i.Sensorless_MOTOR_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Sensorless_MOTOR_START &rArr; Sensorless_START &rArr; Commutation &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_START
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Sensorless_START</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, motorcontrol.o(i.Sensorless_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sensorless_START &rArr; Commutation &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_SetCounter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPPWM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commutation
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_MOTOR_START
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f030_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cw32f030.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, system_cw32f030.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>UPPWM</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, motorcontrol.o(i.UPPWM))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_START
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDcompute
</UL>

<P><STRONG><a name="[14]"></a>VC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.VC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>VC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.VC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>WriteCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled_i2c.o(i.WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteCmd &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_UPdata
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_Init
</UL>

<P><STRONG><a name="[94]"></a>WriteDat</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled_i2c.o(i.WriteDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDat &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteEepromData1
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_UPdata
</UL>

<P><STRONG><a name="[aa]"></a>__0printf$1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c4]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[78]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
</UL>

<P><STRONG><a name="[ac]"></a>__0sprintf$1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[ad]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[29]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[90]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; I2C_OLED_ShowString &rArr; OLED_StrEscCharacter &rArr; I2C_OLED_Move &rArr; I2C_OLED_UPdata &rArr; WriteDat &rArr; I2C_MasterWriteEepromData1
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_MOTOR_START
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSORLESS_TIM_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_STOP
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_UPdata
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowString
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_Clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIIM_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OLED_ShowChar
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[57]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[ab]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
